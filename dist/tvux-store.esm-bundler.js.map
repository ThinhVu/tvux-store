{
  "version": 3,
  "sources": ["../src/devtools.ts", "../src/index.ts"],
  "sourcesContent": ["// @ts-nocheck\nimport { setupDevtoolsPlugin, DevtoolsPluginApi } from '@vue/devtools-api'\nimport { App } from 'vue'\nimport { MyPluginData } from './data'\n\nexport function setupDevtools (app: App, data: MyPluginData) {\n  const stateType = 'Tvux Store Plugin state'\n  const inspectorId = 'tvux-store'\n  const timelineLayerId = 'tvux-store'\n\n  let devtoolsApi: DevtoolsPluginApi<{}>\n\n  let trackId = 0\n\n  const devtools = {\n    trackStart: (label: string) => {\n      const groupId = 'track' + trackId++\n\n      devtoolsApi.addTimelineEvent({\n        layerId: timelineLayerId,\n        event: {\n          time: Date.now(),\n          data: {\n            label\n          },\n          title: label,\n          groupId\n        }\n      })\n\n      return () => {\n        devtoolsApi.addTimelineEvent({\n          layerId: timelineLayerId,\n          event: {\n            time: Date.now(),\n            data: {\n              label,\n              done: true\n            },\n            title: label,\n            groupId\n          }\n        })\n      }\n    }\n  }\n\n  const pluginDescriptor = {\n    id: 'tvux-store-devtools-plugin',\n    label: 'Tvux Store Plugin',\n    packageName: 'tvux-store',\n    homepage: 'https://vuejs.org',\n    componentStateTypes: [\n      stateType\n    ],\n    app\n  }\n\n  const setupFn = api => {\n    devtoolsApi = api\n\n    api.on.inspectComponent((payload, context) => {\n      // payload.instanceData.state.push({\n      //   type: stateType,\n      //   key: '$hello',\n      //   value: data.message,\n      //   editable: false\n      // })\n      //\n      // payload.instanceData.state.push({\n      //   type: stateType,\n      //   key: 'time counter',\n      //   value: data.counter,\n      //   editable: false\n      // })\n    })\n\n    setInterval(() => {\n      api.notifyComponentUpdate()\n    }, 5000)\n\n    api.on.visitComponentTree((payload, context) => {\n      // const node = payload.treeNode\n      // if (payload.componentInstance.type.meow) {\n      //   node.tags.push({\n      //     label: 'meow',\n      //     textColor: 0x000000,\n      //     backgroundColor: 0xff984f\n      //   })\n      // }\n    })\n\n    api.addInspector({\n      id: inspectorId,\n      label: 'Tvux!',\n      icon: 'pets',\n    })\n\n    api.on.getInspectorTree((payload, context) => {\n      if (payload.inspectorId === inspectorId) {\n        payload.rootNodes = [\n          ...Object.keys(data).map(storeName => ({\n            id: storeName,\n            label: storeName\n          }))\n        ]\n      }\n    })\n\n    api.on.getInspectorState((payload, context) => {\n      if (payload.inspectorId === inspectorId) {\n        const storeName = payload.nodeId\n        const store = data[storeName]\n\n        const rawSection = []\n        const refSection = []\n        const computedSection = []\n        const functionSection = []\n\n        Object.keys(store).forEach(storeMemberName => {\n          const field = Reflect.get(store, storeMemberName)\n          const type = field.constructor.name\n          switch (type) {\n            case 'RefImpl':\n              refSection.push({\n                key: storeMemberName,\n                value: store[storeMemberName].value,\n                editable: false\n              })\n              break;\n            case 'ComputedRefImpl':\n              computedSection.push({\n                key: storeMemberName,\n                value: store[storeMemberName].value,\n                editable: false\n              })\n              break;\n            case 'Function':\n              functionSection.push({\n                key: storeMemberName,\n                value: store[storeMemberName],\n                editable: false\n              })\n              break;\n            default:\n              rawSection.push({\n                key: storeMemberName,\n                value: store[storeMemberName],\n                editable: false\n              })\n          }\n        })\n\n        payload.state = {\n          [`0. raw`]: rawSection,\n          [`1. ref`]: refSection,\n          [`2. computed`]: computedSection,\n          [`3. function`]: functionSection\n        }\n      }\n    })\n\n    // timeline event\n    api.addTimelineLayer({\n      id: timelineLayerId,\n      color: 0xff984f,\n      label: 'Awesome!'\n    })\n    window.addEventListener('click', event => {\n      // const groupId = 'group-1'\n      //\n      // devtoolsApi.addTimelineEvent({\n      //   layerId: timelineLayerId,\n      //   event: {\n      //     time: Date.now(),\n      //     data: {\n      //       label: 'group test'\n      //     },\n      //     title: 'group test',\n      //     groupId\n      //   }\n      // })\n      //\n      // devtoolsApi.addTimelineEvent({\n      //   layerId: timelineLayerId,\n      //   event: {\n      //     time: Date.now() + 10,\n      //     data: {\n      //       label: 'group test (event 2)',\n      //     },\n      //     title: 'group test',\n      //     groupId\n      //   }\n      // })\n      //\n      // devtoolsApi.addTimelineEvent({\n      //   layerId: timelineLayerId,\n      //   event: {\n      //     time: Date.now() + 20,\n      //     data: {\n      //       label: 'group test (event 3)',\n      //     },\n      //     title: 'group test',\n      //     groupId\n      //   }\n      // })\n    })\n  }\n\n  setupDevtoolsPlugin(pluginDescriptor, setupFn)\n\n  return devtools\n}\n", "// @ts-nocheck\nimport { App } from 'vue'\nimport { setupDevtools } from './devtools'\n\n// Our plugin\nconst data = {}\n\nexport default {\n  install (app: App, options = {}) {\n    let devtools: ReturnType<typeof setupDevtools>\n    if (process.env.NODE_ENV === 'development' || __VUE_PROD_DEVTOOLS__) {\n      devtools = setupDevtools(app, data)\n    }\n  },\n  create(name: string, store = {}) {\n    data[name] = store\n  },\n  list(scope, prop, val) {\n    if (!data[scope])\n      data[scope] = {}\n    data[scope][prop] = val\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
